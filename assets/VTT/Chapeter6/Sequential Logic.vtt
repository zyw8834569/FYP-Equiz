WEBVTT

1
00:00:00.320 --> 00:00:04.080
so now let's look at how a d latch

2
00:00:04.080 --> 00:00:08.240
a d latch works so here you can see here

3
00:00:08.240 --> 00:00:10.880
the d latch can be considered as two

4
00:00:10.880 --> 00:00:12.799
inverters back to back

5
00:00:12.799 --> 00:00:16.560
connected together with a switch here

6
00:00:16.560 --> 00:00:20.080
so the switch is on when the clock is

7
00:00:20.080 --> 00:00:21.119
one

8
00:00:21.119 --> 00:00:24.320
so when the switch is on the input here

9
00:00:24.320 --> 00:00:28.000
can travel through the first inverter

10
00:00:28.000 --> 00:00:32.880
and go to the second inverter

11
00:00:32.960 --> 00:00:36.480
right when the switch is off

12
00:00:36.480 --> 00:00:39.600
this occurs when clock is equal to zero

13
00:00:39.600 --> 00:00:42.960
so the feedback loop

14
00:00:42.960 --> 00:00:46.239
is now activated so whatever

15
00:00:46.239 --> 00:00:49.030
input was installed in

16
00:00:49.030 --> 00:00:50.719
[Music]

17
00:00:50.719 --> 00:00:53.760
the latch here would continue

18
00:00:53.760 --> 00:00:56.960
on right so it doesn't matter what the

19
00:00:56.960 --> 00:00:59.440
input here is because this switch is

20
00:00:59.440 --> 00:01:01.039
open

21
00:01:01.039 --> 00:01:04.559
so so now the timing diagram

22
00:01:04.559 --> 00:01:07.600
um the d latch has to obey

23
00:01:07.600 --> 00:01:10.159
the setup and hold times before the data

24
00:01:10.159 --> 00:01:10.799
can come

25
00:01:10.799 --> 00:01:13.920
out properly so in order to guarantee

26
00:01:13.920 --> 00:01:14.960
adequate time

27
00:01:14.960 --> 00:01:17.040
to get the correct data at the first

28
00:01:17.040 --> 00:01:18.799
inverter input

29
00:01:18.799 --> 00:01:21.520
before the switch opens the data must be

30
00:01:21.520 --> 00:01:23.360
given

31
00:01:23.360 --> 00:01:26.080
a specific time and this is known as t

32
00:01:26.080 --> 00:01:26.720
setup

33
00:01:26.720 --> 00:01:30.479
before the clock goes low again

34
00:01:30.479 --> 00:01:34.400
so here the setup time

35
00:01:34.400 --> 00:01:38.320
is defined here as the data

36
00:01:38.320 --> 00:01:41.439
this is the setup time when the data

37
00:01:41.439 --> 00:01:46.560
needs to be stabilized and

38
00:01:46.880 --> 00:01:48.960
the data in order for the data to come

39
00:01:48.960 --> 00:01:51.040
out so that

40
00:01:51.040 --> 00:01:53.520
for the setup time the data has to be

41
00:01:53.520 --> 00:01:54.159
present

42
00:01:54.159 --> 00:01:56.960
here before the clock for a certain

43
00:01:56.960 --> 00:01:58.719
period of time

44
00:01:58.719 --> 00:02:02.000
so the setup time is before

45
00:02:02.000 --> 00:02:04.479
and the whole time is how long you must

46
00:02:04.479 --> 00:02:05.920
hold the data

47
00:02:05.920 --> 00:02:09.199
so that the data comes out as an invalid

48
00:02:09.199 --> 00:02:10.000
output

49
00:02:10.000 --> 00:02:13.280
at q alright

50
00:02:13.280 --> 00:02:16.879
so setup is before

51
00:02:17.680 --> 00:02:21.040
the clock and whole time is

52
00:02:21.040 --> 00:02:24.239
after the clock if you violate

53
00:02:24.239 --> 00:02:27.040
the settlement whole time this can cause

54
00:02:27.040 --> 00:02:28.800
metastable problems

55
00:02:28.800 --> 00:02:33.200
or chaotic output

56
00:02:33.200 --> 00:02:36.319
okay so this is the diagram so here

57
00:02:36.319 --> 00:02:39.360
as you can see here the setup time here

58
00:02:39.360 --> 00:02:41.840
is defined at the time the data needs to

59
00:02:41.840 --> 00:02:42.560
be on

60
00:02:42.560 --> 00:02:45.920
or high before the clock turns high

61
00:02:45.920 --> 00:02:48.319
and the whole time is the data still

62
00:02:48.319 --> 00:02:51.040
needs to be on

63
00:02:51.040 --> 00:02:54.000
after the clock has reached the high

64
00:02:54.000 --> 00:02:54.959
value

65
00:02:54.959 --> 00:02:58.159
so the time which the time defined

66
00:02:58.159 --> 00:03:01.200
is the time from the clock

67
00:03:01.200 --> 00:03:03.519
to the output so this is the

68
00:03:03.519 --> 00:03:05.599
propagational delay

69
00:03:05.599 --> 00:03:07.599
so the time is known at the time from

70
00:03:07.599 --> 00:03:08.879
the clock to

71
00:03:08.879 --> 00:03:13.840
q so here for this one the d is low

72
00:03:13.840 --> 00:03:17.200
so this is the setup time

73
00:03:17.200 --> 00:03:20.640
and this is the whole time and

74
00:03:20.640 --> 00:03:24.000
this is the d clock

75
00:03:24.000 --> 00:03:28.480
to q so you can define the clock to q

76
00:03:28.480 --> 00:03:30.799
into two which where the propagational

77
00:03:30.799 --> 00:03:32.959
time to go from

78
00:03:32.959 --> 00:03:36.080
high to low or from low

79
00:03:36.080 --> 00:03:39.200
to high depending on the input okay so

80
00:03:39.200 --> 00:03:40.480
now we have

81
00:03:40.480 --> 00:03:43.760
uh another another static latch this is

82
00:03:43.760 --> 00:03:44.640
the set

83
00:03:44.640 --> 00:03:47.280
they are various types of various types

84
00:03:47.280 --> 00:03:48.959
of d latch circuit

85
00:03:48.959 --> 00:03:51.760
and usually we can use a single phase

86
00:03:51.760 --> 00:03:52.879
clock

87
00:03:52.879 --> 00:03:56.879
right so the first

88
00:03:56.879 --> 00:04:00.879
diagram shows the use of

89
00:04:00.879 --> 00:04:04.480
a weak inventor with a the weak inventor

90
00:04:04.480 --> 00:04:05.439
is defined as an

91
00:04:05.439 --> 00:04:08.959
inverter with a low w over l

92
00:04:08.959 --> 00:04:12.959
to allow the removal of feedback loop

93
00:04:12.959 --> 00:04:17.040
x gate but retain this

94
00:04:17.040 --> 00:04:20.560
static latch function okay

95
00:04:20.560 --> 00:04:23.600
so here

96
00:04:24.560 --> 00:04:26.880
you have the transmission gate this is

97
00:04:26.880 --> 00:04:28.880
the transmission gate

98
00:04:28.880 --> 00:04:31.440
and when the clock is high the d passes

99
00:04:31.440 --> 00:04:32.400
through

100
00:04:32.400 --> 00:04:36.400
and this one when clock is high the

101
00:04:36.400 --> 00:04:41.040
clock bar is zero so the

102
00:04:41.199 --> 00:04:44.479
the output here will be the input will

103
00:04:44.479 --> 00:04:46.800
be transmitted to the output here

104
00:04:46.800 --> 00:04:51.199
and the inverter will invert the output

105
00:04:51.199 --> 00:04:54.560
and this can help to retain the signal

106
00:04:54.560 --> 00:04:58.000
inside the loop

107
00:04:59.280 --> 00:05:02.880
okay so in circuit b you have two of

108
00:05:02.880 --> 00:05:05.120
them connected back to back

109
00:05:05.120 --> 00:05:08.880
and the difference here is that

110
00:05:08.880 --> 00:05:12.400
you have an inverter so in between

111
00:05:12.400 --> 00:05:15.840
so this is the input zero

112
00:05:15.840 --> 00:05:20.000
and this will become one and this is one

113
00:05:20.000 --> 00:05:22.800
and if you want the actual output you

114
00:05:22.800 --> 00:05:23.759
have to put it

115
00:05:23.759 --> 00:05:27.039
into an inverter so then you will get

116
00:05:27.039 --> 00:05:31.280
d equals to the q will be equals to

117
00:05:31.280 --> 00:05:35.759
the d okay

118
00:05:37.199 --> 00:05:40.000
so the implementation here as you can

119
00:05:40.000 --> 00:05:41.360
see here

120
00:05:41.360 --> 00:05:43.840
this implementation is this is the

121
00:05:43.840 --> 00:05:45.680
inverter

122
00:05:45.680 --> 00:05:48.240
this inverter is a bit special as they

123
00:05:48.240 --> 00:05:48.800
added

124
00:05:48.800 --> 00:05:52.160
the clock node so the clock

125
00:05:52.160 --> 00:05:55.919
node here is an added

126
00:05:55.919 --> 00:06:00.160
transistor both at the pmos and the nmos

127
00:06:00.160 --> 00:06:04.000
so if what does the

128
00:06:04.000 --> 00:06:07.039
clock do so if the clock is high

129
00:06:07.039 --> 00:06:09.759
so let's say d is one this is one so

130
00:06:09.759 --> 00:06:11.120
this is one

131
00:06:11.120 --> 00:06:13.199
and the clock is high so the clock is

132
00:06:13.199 --> 00:06:16.000
high this node will be pulled down to

133
00:06:16.000 --> 00:06:19.199
zero okay

134
00:06:19.199 --> 00:06:22.960
and the reverse when

135
00:06:24.639 --> 00:06:28.080
when d is zero and

136
00:06:28.080 --> 00:06:30.800
the clock

137
00:06:31.280 --> 00:06:35.360
is zero so the clock is

138
00:06:35.360 --> 00:06:37.759
clock is high and clock bar will be zero

139
00:06:37.759 --> 00:06:39.680
so this one will be on

140
00:06:39.680 --> 00:06:43.360
and this is on

141
00:06:43.360 --> 00:06:46.560
so the output will be pulled up

142
00:06:46.560 --> 00:06:51.680
so the output will be one okay

143
00:06:56.240 --> 00:06:59.599
so this it can be used to implement

144
00:06:59.599 --> 00:07:03.599
the active state latch this

145
00:07:03.599 --> 00:07:06.880
kind of schematic

146
00:07:06.880 --> 00:07:10.479
all right so you can avoid clock skew

147
00:07:10.479 --> 00:07:12.319
you may have clock skew here because you

148
00:07:12.319 --> 00:07:13.599
have clock at

149
00:07:13.599 --> 00:07:16.560
one gate and then another clock at their

150
00:07:16.560 --> 00:07:17.680
second gate

151
00:07:17.680 --> 00:07:21.599
so this clock skew problem can be solved

152
00:07:21.599 --> 00:07:24.560
by using by using buffering in clock

153
00:07:24.560 --> 00:07:25.520
nets

154
00:07:25.520 --> 00:07:28.000
so you use inverter buffer to generate

155
00:07:28.000 --> 00:07:29.199
the negative clock

156
00:07:29.199 --> 00:07:32.960
and transmission gain gate buffers

157
00:07:32.960 --> 00:07:35.199
for true clock so inverter buffer is

158
00:07:35.199 --> 00:07:37.120
just connecting an inverter

159
00:07:37.120 --> 00:07:39.120
and transmission gate buffer means that

160
00:07:39.120 --> 00:07:40.639
you connect it to a

161
00:07:40.639 --> 00:07:43.599
transmission key this is the

162
00:07:43.599 --> 00:07:46.479
transmission gate

163
00:07:51.840 --> 00:07:55.919
so con construction of a d register

164
00:07:55.919 --> 00:07:59.039
as you can see the d register is

165
00:07:59.039 --> 00:08:00.960
actually

166
00:08:00.960 --> 00:08:03.759
edge triggered

167
00:08:06.800 --> 00:08:10.080
so h3 get register actually consists of

168
00:08:10.080 --> 00:08:13.759
2d latch connected back to back

169
00:08:13.759 --> 00:08:17.039
right and the register timing so let's

170
00:08:17.039 --> 00:08:19.280
see here

171
00:08:19.280 --> 00:08:22.639
when you have the edge triggered

172
00:08:22.639 --> 00:08:24.160
register

173
00:08:24.160 --> 00:08:27.280
you can cause it to

174
00:08:27.280 --> 00:08:30.000
be level triggered so the level

175
00:08:30.000 --> 00:08:31.120
triggered mean that

176
00:08:31.120 --> 00:08:33.919
it will work either at the positive edge

177
00:08:33.919 --> 00:08:35.599
of the clock or the negative

178
00:08:35.599 --> 00:08:38.080
edge in this case this strand this

179
00:08:38.080 --> 00:08:40.399
register is positive h

180
00:08:40.399 --> 00:08:43.599
so look let's look at the output here so

181
00:08:43.599 --> 00:08:48.240
the d the q will reflect what is the d

182
00:08:48.240 --> 00:08:51.839
whenever the clock is high it goes

183
00:08:51.839 --> 00:08:54.959
too high and at the positive edge so

184
00:08:54.959 --> 00:08:57.920
it will evaluate the function so this it

185
00:08:57.920 --> 00:08:58.959
will evaluate d

186
00:08:58.959 --> 00:09:02.000
and will come it out at q and at the

187
00:09:02.000 --> 00:09:03.920
next positive h

188
00:09:03.920 --> 00:09:08.399
right of the clock the

189
00:09:08.399 --> 00:09:12.000
queue will follow the d

190
00:09:12.080 --> 00:09:15.279
so the data must be valid um based on

191
00:09:15.279 --> 00:09:17.440
the setup and hold time just like in

192
00:09:17.440 --> 00:09:17.839
your

193
00:09:17.839 --> 00:09:20.320
lectures

194
00:09:20.959 --> 00:09:23.920
okay you can also have a negative edge

195
00:09:23.920 --> 00:09:24.800
uh

196
00:09:24.800 --> 00:09:28.880
the flip-flop and this

197
00:09:29.200 --> 00:09:32.240
this negative edge circuit the master

198
00:09:32.240 --> 00:09:33.839
latch receive the input d

199
00:09:33.839 --> 00:09:36.480
until the clock falls from high to low

200
00:09:36.480 --> 00:09:37.200
at which point

201
00:09:37.200 --> 00:09:39.200
it will set the data in the master ledge

202
00:09:39.200 --> 00:09:40.640
and send it to the

203
00:09:40.640 --> 00:09:44.240
output queue right the same way this has

204
00:09:44.240 --> 00:09:46.320
two

205
00:09:46.320 --> 00:09:51.680
blocks this is the master

206
00:09:51.680 --> 00:09:54.800
and this is the slave it's

207
00:09:54.800 --> 00:09:58.320
two blocks

208
00:09:58.320 --> 00:10:02.959
the flip flop connected back to back

209
00:10:02.959 --> 00:10:06.079
and this is negative h triggered and as

210
00:10:06.079 --> 00:10:09.040
you can see here

211
00:10:09.760 --> 00:10:12.320
is negative a triggered because over

212
00:10:12.320 --> 00:10:12.800
here

213
00:10:12.800 --> 00:10:15.839
this one is activated by

214
00:10:15.839 --> 00:10:19.839
clock and clock bar

215
00:10:20.480 --> 00:10:22.560
i should schmidt trigger circuit the

216
00:10:22.560 --> 00:10:24.959
schmidt trigger circuit

217
00:10:24.959 --> 00:10:27.279
it has a characteristic as an inverter

218
00:10:27.279 --> 00:10:30.160
but it has different switching threshold

219
00:10:30.160 --> 00:10:33.440
so if an inverter you only have one line

220
00:10:33.440 --> 00:10:36.800
and this will go up and down

221
00:10:36.800 --> 00:10:39.680
at the same line for schmidt trigger it

222
00:10:39.680 --> 00:10:42.560
occurs like a hysteresis

223
00:10:42.560 --> 00:10:47.839
so you can see here it has one

224
00:10:48.160 --> 00:10:50.959
one curve

225
00:10:52.720 --> 00:10:55.360
when it goes from high to low and one

226
00:10:55.360 --> 00:10:57.440
another curve when it goes from low to

227
00:10:57.440 --> 00:10:58.480
high

228
00:10:58.480 --> 00:11:03.680
this can be done by using the inverter

229
00:11:03.680 --> 00:11:06.880
this is the inverter and connecting two

230
00:11:06.880 --> 00:11:10.000
extra transistors here and the

231
00:11:10.000 --> 00:11:13.519
transistor at the output

232
00:11:13.519 --> 00:11:15.839
so

233
00:11:17.440 --> 00:11:20.640
this uh schmidt trigger circuit has a

234
00:11:20.640 --> 00:11:23.839
hysteresis effect and if v

235
00:11:23.839 --> 00:11:27.040
in is increasing

236
00:11:27.279 --> 00:11:29.920
it has a high threshold voltage and if v

237
00:11:29.920 --> 00:11:32.160
in is decreasing

238
00:11:32.160 --> 00:11:35.279
then it has a low threshold voltage

239
00:11:35.279 --> 00:11:39.360
so this is the output of the circuit so

240
00:11:39.360 --> 00:11:43.839
when you increase the in

241
00:11:43.920 --> 00:11:47.680
right you will follow this and when you

242
00:11:47.680 --> 00:11:48.560
decrease

243
00:11:48.560 --> 00:11:52.160
be in 2b threshold you it will follow

244
00:11:52.160 --> 00:11:54.639
another

245
00:11:54.839 --> 00:11:57.839
curve

246
00:11:59.279 --> 00:12:02.320
clocking strategies

247
00:12:02.800 --> 00:12:05.760
so clogging strategies uh blsi system

248
00:12:05.760 --> 00:12:06.079
you

249
00:12:06.079 --> 00:12:08.240
need universally make use of storage

250
00:12:08.240 --> 00:12:09.200
elements and state

251
00:12:09.200 --> 00:12:12.240
with clocks to control the sequencing so

252
00:12:12.240 --> 00:12:12.639
this

253
00:12:12.639 --> 00:12:15.360
block diagram shows the block diagram of

254
00:12:15.360 --> 00:12:17.360
finite state machine

255
00:12:17.360 --> 00:12:20.079
right where the in the output is

256
00:12:20.079 --> 00:12:21.760
dependent on the input

257
00:12:21.760 --> 00:12:25.200
and also depending on the state

258
00:12:25.200 --> 00:12:29.279
so in uh today's microprocessor

259
00:12:29.279 --> 00:12:33.120
a lot of them are known as

260
00:12:33.120 --> 00:12:36.079
are broken down into a pipeline system

261
00:12:36.079 --> 00:12:36.720
whereas

262
00:12:36.720 --> 00:12:39.519
where the registers are contacted with

263
00:12:39.519 --> 00:12:42.000
the logic

264
00:12:42.000 --> 00:12:45.200
one block and it can be broken down into

265
00:12:45.200 --> 00:12:47.440
several blocks and this is pipeline

266
00:12:47.440 --> 00:12:48.560
system

267
00:12:48.560 --> 00:12:51.120
and the idea is breaking into several

268
00:12:51.120 --> 00:12:52.399
blocks is that

269
00:12:52.399 --> 00:12:54.720
each

270
00:12:56.160 --> 00:12:59.360
block can be optimized

271
00:12:59.360 --> 00:13:04.399
but instead of putting it as a whole big

272
00:13:04.839 --> 00:13:07.839
block

273
00:13:12.560 --> 00:13:15.360
pipelining pipelining system typically

274
00:13:15.360 --> 00:13:16.959
has registers separated by

275
00:13:16.959 --> 00:13:19.680
communication and logic and the minimum

276
00:13:19.680 --> 00:13:20.160
cycle

277
00:13:20.160 --> 00:13:23.440
time is obtained by

278
00:13:23.440 --> 00:13:26.800
by adding dq which is the clock to q

279
00:13:26.800 --> 00:13:30.000
output delay plus td which is the worst

280
00:13:30.000 --> 00:13:32.639
case delay and ts is the setup time

281
00:13:32.639 --> 00:13:33.600
delay

282
00:13:33.600 --> 00:13:36.959
of register b so

283
00:13:36.959 --> 00:13:40.079
pipeline system comes from the pipeline

284
00:13:40.079 --> 00:13:41.279
in manufacturing

285
00:13:41.279 --> 00:13:45.120
so for example if you want to make a car

286
00:13:45.120 --> 00:13:49.839
right you first have to have the body

287
00:13:50.959 --> 00:13:54.480
and then you have the

288
00:13:54.480 --> 00:13:58.320
complete system so instead of having

289
00:13:58.320 --> 00:14:02.399
one block directly to the car you can

290
00:14:02.399 --> 00:14:04.320
break it up into

291
00:14:04.320 --> 00:14:07.199
three steps when you break it up into

292
00:14:07.199 --> 00:14:08.240
three steps

293
00:14:08.240 --> 00:14:11.360
you can do parallel processing so for

294
00:14:11.360 --> 00:14:12.240
example this is

295
00:14:12.240 --> 00:14:15.440
line one and you have another line two

296
00:14:15.440 --> 00:14:19.519
and the line two can

297
00:14:19.519 --> 00:14:23.600
do parallel processing at the same time

298
00:14:23.600 --> 00:14:31.839
okay so um so this

299
00:14:42.000 --> 00:14:45.199
all right so in this case it will take

300
00:14:45.199 --> 00:14:48.800
instead of taking

301
00:14:49.279 --> 00:14:51.839
instead of taking so each one this is

302
00:14:51.839 --> 00:14:52.800
let's say one

303
00:14:52.800 --> 00:14:55.680
one block is one second so to complete

304
00:14:55.680 --> 00:14:58.720
three cars

305
00:14:58.720 --> 00:15:12.720
complete three cars to complete one car

306
00:15:12.720 --> 00:15:15.519
to complete one car it takes three

307
00:15:15.519 --> 00:15:16.480
seconds

308
00:15:16.480 --> 00:15:20.240
so by logic it should take three

309
00:15:20.240 --> 00:15:22.720
for three cars it should take three

310
00:15:22.720 --> 00:15:23.680
times three

311
00:15:23.680 --> 00:15:26.240
which is nine seconds but by using

312
00:15:26.240 --> 00:15:27.279
pipelining

313
00:15:27.279 --> 00:15:31.040
in order to um to complete three cars

314
00:15:31.040 --> 00:15:34.240
right you will only need one two three

315
00:15:34.240 --> 00:15:36.720
and this one is another step because it

316
00:15:36.720 --> 00:15:37.519
will complete

317
00:15:37.519 --> 00:15:40.480
and this is another two steps so one two

318
00:15:40.480 --> 00:15:42.480
three four

319
00:15:42.480 --> 00:15:45.600
using pipelining

320
00:15:45.759 --> 00:15:48.560
three cars can be finished in five

321
00:15:48.560 --> 00:15:50.720
seconds so you have a power

322
00:15:50.720 --> 00:15:54.240
or a time saving

323
00:15:54.240 --> 00:15:58.560
method so the same way

324
00:15:58.560 --> 00:16:02.399
for the pipeline system

325
00:16:02.399 --> 00:16:06.000
here we will break the

326
00:16:06.320 --> 00:16:08.399
combinational logic into several

327
00:16:08.399 --> 00:16:11.120
different blocks or chains

328
00:16:11.120 --> 00:16:14.399
so this can allow us

329
00:16:14.399 --> 00:16:17.600
to increase the frequency in the super

330
00:16:17.600 --> 00:16:20.000
pipeline or superscalar machine

331
00:16:20.000 --> 00:16:22.959
so we the idea is that you split long

332
00:16:22.959 --> 00:16:24.800
combination logic blocks

333
00:16:24.800 --> 00:16:27.040
into smaller combination blocks which

334
00:16:27.040 --> 00:16:28.079
can run in

335
00:16:28.079 --> 00:16:32.240
parallel so sometimes this offer

336
00:16:32.240 --> 00:16:34.000
improves the overall frequency of the

337
00:16:34.000 --> 00:16:36.480
profi processor but sometimes it adds

338
00:16:36.480 --> 00:16:39.839
some delay penalty

339
00:16:40.079 --> 00:16:42.959
okay however in a pipeline because there

340
00:16:42.959 --> 00:16:43.839
are many

341
00:16:43.839 --> 00:16:47.360
there are clocks running the same clock

342
00:16:47.360 --> 00:16:49.120
has to run at different registers

343
00:16:49.120 --> 00:16:52.000
so sometimes there will be clocks q

344
00:16:52.000 --> 00:16:53.519
clock skew means that

345
00:16:53.519 --> 00:16:55.920
the clock doesn't arrive at the same

346
00:16:55.920 --> 00:16:56.560
time

347
00:16:56.560 --> 00:17:00.480
so maybe this is the clock at m1

348
00:17:00.480 --> 00:17:02.800
there will be another clock it will try

349
00:17:02.800 --> 00:17:06.079
to follow the same clock

350
00:17:06.799 --> 00:17:11.359
here this is the clock at m2

351
00:17:11.359 --> 00:17:16.798
so there will be still the slide delay

352
00:17:16.839 --> 00:17:19.839
here

353
00:17:20.079 --> 00:17:33.440
so this delay names as clock skew

354
00:17:33.440 --> 00:17:35.440
so clock tree distribution i have done

355
00:17:35.440 --> 00:17:39.120
this so i will skip this part

356
00:17:42.799 --> 00:17:44.880
so let's look at the typical layout for

357
00:17:44.880 --> 00:17:46.320
the latch circuit

358
00:17:46.320 --> 00:17:48.240
as you can see there are many ways of

359
00:17:48.240 --> 00:17:50.320
doing the layout

360
00:17:50.320 --> 00:17:54.320
so here we use this kind of gate

361
00:17:54.320 --> 00:17:58.480
to the inverter with an added transistor

362
00:17:58.480 --> 00:18:01.440
and this will make real a compact layout

363
00:18:01.440 --> 00:18:04.799
you can also use transmission gate

364
00:18:04.799 --> 00:18:08.320
here both the the

365
00:18:08.799 --> 00:18:12.000
input and the storage

366
00:18:12.000 --> 00:18:16.000
is using transmission gate

367
00:18:18.640 --> 00:18:22.559
and the last one is

368
00:18:22.880 --> 00:18:25.520
the conventional delay circuit you can

369
00:18:25.520 --> 00:18:27.200
shrink it even more

370
00:18:27.200 --> 00:18:30.400
and make it less complicated

